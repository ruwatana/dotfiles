#!/bin/bash

# If has error when script is running, make stop
set -e

# Global constants
DOT_DIRECTORY="${HOME}/dotfiles"
DOT_TARBALL="https://github.com/ruwatana/dotfiles/tarball/master"
REMOTE_URL="git@github.com:ruwatana/dotfiles.git"

# Whether some command can use
has() {
  type "$1" > /dev/null 2>&1
}

# Echo help
help() {
  name=`basename $0`
  cat <<EOF
Usage:
  $name [arguments] [command]
Commands:
  deploy: make symbolic links
  initialize: install/update and deploy
Arguments:
  -h Print help (this message)
EOF
  exit 1
}

# Argument options
while getopts :f:h opt; do
  case ${opt} in
    f)
      OVERWRITE=true
      ;;
    h)
     help 
      ;;
  esac
done
shift $((OPTIND - 1))

# Working only OS X.
case ${OSTYPE} in
  darwin*)
    ;;
  *)
    echo $(tput setaf 1)Working only OS X!!$(tput sgr0)
    exit 1
    ;;
esac

# If missing, download and extract the dotfiles repository
if [ ! -d ${DOT_DIRECTORY} ]; then
  echo "Downloading dotfiles..."
  mkdir ${DOT_DIRECTORY}

  if has "git"; then
    git clone --recursive "${REMOTE_URL}" "${DOT_DIRECTORY}"
  else
    curl -fsSLo ${HOME}/dotfiles.tar.gz ${DOT_TARBALL}
    tar -zxf ${HOME}/dotfiles.tar.gz --strip-components 1 -C ${DOT_DIRECTORY}
    rm -f ${HOME}/dotfiles.tar.gz
  fi

  echo $(tput setaf 2)Download dotfiles complete!. ✔︎$(tput sgr0)
fi

cd ${DOT_DIRECTORY}

# Deployment
deploy() {
  for f in .??*
  do
    # Force remove the vim directory if it's already there
    [ -n "${OVERWRITE}" -a -e ${HOME}/${f} ] && rm -f ${HOME}/${f}
    if [ ! -e ${HOME}/${f} ]; then
      # If you have ignore files, add file/directory name here
      [[ ${f} = ".git" ]] && continue
      [[ ${f} = ".gitignore" ]] && continue
      ln -snfv ${DOT_DIRECTORY}/${f} ${HOME}/${f}
    fi
  done

  echo $(tput setaf 2)Deploy dotfiles complete!. ✔︎$(tput sgr0)
}

# Brew
run_brew() {
  # Install brew
  if has "brew"; then
    echo "$(tput setaf 2)Already installed Homebrew ✔︎$(tput sgr0)"
  else
    echo "Installing Homebrew..."
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  fi

  if has "brew"; then
    # Update brew
    echo "Updating Homebrew..."
    brew update
    brew upgrade
    [[ $? ]] && echo "$(tput setaf 2)Update Homebrew complete. ✔︎$(tput sgr0)"

    # brew tap
    brew tap 'caskroom/cask' # Homebrew Cask
    brew tap 'caskroom/versions' # Homebrew Cask versions
    brew tap 'anyenv/anyenv'
    brew tap 'AdoptOpenJDK/openjdk'

    # Install each package if needed by brew
    local list_formulae
    local -a missing_formulae
    local -a desired_formulae=(
      'anyenv'
      'carthage'
      'composer'
      'ffmpeg'
      'git'
      'imagemagick'
      'node@10'
      'openssl'
      'tmux'
      'tree'
      'wget'
      'zsh'
    )

    local installed=`brew list`

    for index in ${!desired_formulae[*]}
    do
      local formula=`echo ${desired_formulae[$index]} | cut -d' ' -f 1`
      if [[ -z `echo "${installed}" | grep "^${formula}$"` ]]; then
        missing_formulae=("${missing_formulae[@]}" "${desired_formulae[$index]}")
      else
        echo "Installed ${formula}"
      fi
    done

    if [[ "$missing_formulae" ]]; then
      list_formulae=$( printf "%s " "${missing_formulae[@]}" )

      echo "Installing missing Homebrew formulae..."
      brew install $list_formulae

      [[ $? ]] && echo "$(tput setaf 2)Installed missing formulae ✔︎$(tput sgr0)"
    fi

    # Install each application if needed by brew cask
    local -a missing_formulae=()
    local -a desired_formulae=(
      'abstract'
      'alfred'
      'atom'
      'bettertouchtool'
      'charles'
      'cyberduck'
      'google-chrome'
      'iterm2'
      'intellij-idea'
      'adoptopenjdk8'
      'sequel-pro'
      'slack'
      'sketch'
      'skitch'
      'visual-studio-code'
      'zoomus'
    )

    local installed=`brew cask list`

    for index in ${!desired_formulae[*]}
    do
      local formula=`echo ${desired_formulae[$index]} | cut -d' ' -f 1`
      if [[ -z `echo "${installed}" | grep "^${formula}$"` ]]; then
        missing_formulae=("${missing_formulae[@]}" "${desired_formulae[$index]}")
      fi
    done

    if [[ "$missing_formulae" ]]; then
      list_formulae=$( printf "%s " "${missing_formulae[@]}" )

      echo "Installing missing Homebrew formulae..."
      brew cask install $list_formulae

      [[ $? ]] && echo "$(tput setaf 2)Installed missing formulae ✔︎$(tput sgr0)"
    fi

    # Cleanup brew
    echo "Cleanup Homebrew..."
    brew cleanup

    echo "$(tput setaf 2)Cleanup Homebrew complete. ✔︎$(tput sgr0)"
  fi
}

# anyenv
run_anyenv() {
  echo "Initializing anyenv..."

  if has "anyenv"; then
    echo "Installing anyenv..."
    anyenv install rbenv
    anyenv install pyenv
    anyenv install phpenv
    anyenv install ndenv
    exec $SHELL -l

    echo "$(tput setaf 2)Installed anyenv ✔︎$(tput sgr0)"

  else
    echo "$(tput setaf 1)anyenv not existed path.$(tput sgr0)"
    exit 1
  fi

  # pyenv
  if has "pyenv"; then
    # Install python 3.X.X (latest)
    latest3x=`pyenv install --list | grep -v - | grep -oe '3.\d.\d*$' | tail -n 1`
    current=`pyenv versions | grep -oe '\d\.\d\{1,\}\.\d\{1,\}\([ ]\|$\)' | tail -n 1 | tr -d "[:space:]"`
    if [[ ${current} != ${latest3x} ]]; then
      echo "Installing pyenv install ${latest3x}"
      pyenv install ${latest3x}
      pyenv global ${latest3x}
    else  
      echo "Already pyenv global version is ${latest3x}"
      pyenv global ${latest3x}
    fi

  else
    echo "$(tput setaf 1)pyenv not installed.$(tput sgr0)"
    exit 1
  fi
}

# Installation and initialize
initialize() {
  run_brew

  # Install zplug (zsh plugin)
  [ ! -d ${HOME}/.zplug ] && curl -sL --proto-redir -all,https https://raw.githubusercontent.com/zplug/installer/master/installer.zsh| zsh

  # Change shell to zsh
  [ ${SHELL} != "/bin/zsh"  ] && chsh -s /bin/zsh

  # Install tpm (tmux plugin manager)
  [ ! -d ${HOME}/.tmux/plugins/tpm ] && git clone https://github.com/tmux-plugins/tpm ${HOME}/.tmux/plugins/tpm

  # Install dein.vim
  if [ ! -d ${HOME}/.vim/repos/github.com/Shougo/dein.vim ]; then
    curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > installer.sh
    sh ./installer.sh ~/.vim
    rm -rf ./installer.sh
    echo "$(tput setaf 2)dein.vim install complete. ✔︎$(tput sgr0)"
  else
    echo "$(tput setaf 2)dein.vim already installed. ✔︎$(tput sgr0)"
  fi

  deploy

  run_anyenv

  echo "$(tput setaf 2)Initialize complete!. ✔︎$(tput sgr0)"
}

command=$1
[ $# -gt 0 ] && shift

case $command in
  deploy)
    deploy
    ;;
  init*)
    initialize
    ;;
  *)
    help 
    ;;
esac

exit 0

